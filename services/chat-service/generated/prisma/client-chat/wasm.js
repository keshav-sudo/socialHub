
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  chatType: 'chatType',
  participants: 'participants',
  lastMessage: 'lastMessage',
  lastMessageBy: 'lastMessageBy',
  lastMessageAt: 'lastMessageAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  messageType: 'messageType',
  senderId: 'senderId',
  senderUsername: 'senderUsername',
  content: 'content',
  mediaUrl: 'mediaUrl',
  status: 'status',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  reactions: 'reactions',
  replyTo: 'replyTo',
  createdAt: 'createdAt'
};

exports.Prisma.MessageReadStatusScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  status: 'status',
  timestamp: 'timestamp'
};

exports.Prisma.UnreadCountScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  userId: 'userId',
  count: 'count',
  lastReadAt: 'lastReadAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.ChatType = exports.$Enums.ChatType = {
  SINGLE: 'SINGLE',
  GROUP: 'GROUP'
};

exports.MsgStatus = exports.$Enums.MsgStatus = {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ',
  FAILED: 'FAILED'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  FILE: 'FILE'
};

exports.Prisma.ModelName = {
  Conversation: 'Conversation',
  Message: 'Message',
  MessageReadStatus: 'MessageReadStatus',
  UnreadCount: 'UnreadCount'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/keshav/App/socialHub/services/chat-service/generated/prisma/client-chat",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/keshav/App/socialHub/services/chat-service/prisma-chat/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../../.env",
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma-chat",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mongodb",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL_1",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma/client-chat\"\n}\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL_1\")\n}\n\nenum ChatType {\n  SINGLE\n  GROUP\n}\n\nenum MsgStatus {\n  SENT\n  DELIVERED\n  READ\n  FAILED\n}\n\nenum MessageType {\n  TEXT\n  IMAGE\n  VIDEO\n  AUDIO\n  FILE\n}\n\n// Conversation model - Instagram style conversation list\nmodel Conversation {\n  id             String    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  conversationId String    @unique @map(\"conversation_id\")\n  chatType       ChatType  @map(\"chat_type\")\n  participants   String[] // Array of user IDs\n  lastMessage    String?   @map(\"last_message\")\n  lastMessageBy  String?   @map(\"last_message_by\")\n  lastMessageAt  DateTime? @map(\"last_message_at\")\n  createdAt      DateTime  @default(now()) @map(\"created_at\")\n  updatedAt      DateTime  @updatedAt @map(\"updated_at\")\n\n  @@index([participants])\n  @@map(\"conversations\")\n}\n\n// Message model with Instagram features\nmodel Message {\n  id             String      @id @default(auto()) @map(\"_id\") @db.ObjectId\n  conversationId String      @map(\"conversation_id\")\n  messageType    MessageType @default(TEXT) @map(\"message_type\")\n  senderId       String      @map(\"sender_id\")\n  senderUsername String      @map(\"sender_username\")\n  content        String\n  mediaUrl       String?     @map(\"media_url\") // For images/videos\n  status         MsgStatus   @default(SENT)\n  isDeleted      Boolean     @default(false) @map(\"is_deleted\")\n  deletedAt      DateTime?   @map(\"deleted_at\")\n  reactions      Json? // {userId: emoji} for reactions\n  replyTo        String?     @map(\"reply_to\") @db.ObjectId // Reply to message ID\n  createdAt      DateTime    @default(now()) @map(\"created_at\")\n\n  @@index([conversationId, createdAt])\n  @@index([senderId])\n  @@map(\"messages\")\n}\n\n// Message read/delivery tracking - who has read/delivered\nmodel MessageReadStatus {\n  id        String    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  messageId String    @map(\"message_id\") @db.ObjectId\n  userId    String    @map(\"user_id\")\n  status    MsgStatus @default(SENT)\n  timestamp DateTime  @default(now())\n\n  @@unique([messageId, userId])\n  @@index([messageId])\n  @@index([userId])\n  @@map(\"message_read_statuses\")\n}\n\n// Unread count per conversation per user\nmodel UnreadCount {\n  id             String    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  conversationId String    @map(\"conversation_id\")\n  userId         String    @map(\"user_id\")\n  count          Int       @default(0)\n  lastReadAt     DateTime? @map(\"last_read_at\")\n\n  @@unique([conversationId, userId])\n  @@index([userId])\n  @@map(\"unread_counts\")\n}\n",
  "inlineSchemaHash": "cbd83facb848c0091e3f245abff3023effebbafc4d957eba2b80319073f3f85a",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Conversation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"conversation_id\"},{\"name\":\"chatType\",\"kind\":\"enum\",\"type\":\"ChatType\",\"dbName\":\"chat_type\"},{\"name\":\"participants\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastMessage\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"last_message\"},{\"name\":\"lastMessageBy\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"last_message_by\"},{\"name\":\"lastMessageAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"last_message_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"}],\"dbName\":\"conversations\"},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"conversation_id\"},{\"name\":\"messageType\",\"kind\":\"enum\",\"type\":\"MessageType\",\"dbName\":\"message_type\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"sender_id\"},{\"name\":\"senderUsername\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"sender_username\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mediaUrl\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"media_url\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"MsgStatus\"},{\"name\":\"isDeleted\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_deleted\"},{\"name\":\"deletedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"deleted_at\"},{\"name\":\"reactions\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"replyTo\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"reply_to\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"}],\"dbName\":\"messages\"},\"MessageReadStatus\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"message_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"MsgStatus\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"message_read_statuses\"},\"UnreadCount\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"conversation_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"count\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastReadAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"last_read_at\"}],\"dbName\":\"unread_counts\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL_1: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL_1'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL_1 || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

